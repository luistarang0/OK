@model OK.Models.Usuario

@{
    ViewData["Title"] = "Perfil";
    int maxMarks = (int)(ViewBag.Porcentaje / 100.0 * 360);
}

@section Styles {
    <link rel="stylesheet" href="@Url.Content("~/css/estilosPer.css")" />
}



    <section class="hero" style="padding: 40px 20px;">
        <div class="hero-container">
            <div class="hero-content">
                <h1><span class="gradient-text">Mi Perfil</span> Fundación OK</h1>
                <p>Gestiona tu información y revisa tu progreso</p>
            </div>
        </div>
    </section>

    <main class="profile-page">
        <!-- Sección de información del perfil -->
        <section class="profile-info">
            <div class="profile-header">
                <div class="profile-pic">
                    <img src="@Url.Content("~/images/halcon1.png")" alt="Imagen de perfil">
                </div>
                <div class="profile-name">
                    <h2>Perfil de Usuario</h2>
                    <p>Miembro desde <span id="memberSince" data-fecha="@Model.FechaRegistro.ToString("yyyy-MM-dd")">-</span></p>
                </div>
            </div>

            <form method="post" action="@Url.Action("Editar", "Usuarios")">
                <div class="profile-details">
                    <div class="detail-item">
                        <label>Nombre:</label>
                        <span class="display-mode">@Model.Nombre</span>
                        <input class="edit-mode form-input" type="text" name="Nombre" value="@Model.Nombre" style="display:none;" required />
                    </div>

                    <div class="detail-item">
                        <label>Apellido Paterno:</label>
                        <span class="display-mode">@Model.ApPat</span>
                        <input class="edit-mode form-input" type="text" name="ApPat" value="@Model.ApPat" style="display:none;" required/>
                    </div>

                    <div class="detail-item">
                        <label>Apellido Materno:</label>
                        <span class="display-mode">@Model.ApMat</span>
                        <input class="edit-mode form-input" type="text" name="ApMat" value="@Model.ApMat" style="display:none;" required />
                    </div>

                    <div class="detail-item">
                        <label>Edad:</label>
                        <span class="display-mode">@Model.Edad</span>
                        <input class="edit-mode form-input" type="number" name="Edad" value="@Model.Edad" style="display:none;" min="15" max="99" required />
                    </div>

                    <div class="detail-item no-edit">
                        <label>Email:</label>
                        <span class="display-mode">@Model.Email</span>
                    </div>

                    <div class="detail-item">
                        <label>Carrera:</label>
                        <span class="display-mode">@Model.Carrera</span>
                        <input class="edit-mode form-input" type="text" name="Carrera" value="@Model.Carrera" style="display:none;" />
                    </div>

                    <div class="detail-item">
                        <label>Semestre:</label>
                        <span class="display-mode">@Model.Semestre</span>
                        <input class="edit-mode form-input" type="number" name="Semestre" value="@Model.Semestre" style="display:none;" />
                    </div>

                    <div class="detail-item no-edit">
                        <label>Fecha de creación:</label>
                        <span class="display-mode">@Model.FechaRegistro.ToString("dd/MM/yyyy")</span>
                    </div>

                    <div class="detail-item">
                        <label class="edit-mode" style="display:none;">Nueva contraseña:</label>
                        <input class="edit-mode form-input" type="password" name="Password" placeholder="••••••••" style="display:none;" />
                    </div>

                    <div class="detail-item">
                        <label class="edit-mode" style="display:none;">Confirmar contraseña:</label>
                        <input class="edit-mode form-input" type="password" name="ConfirmarPassword" placeholder="••••••••" style="display:none;" />
                    </div>
                </div>

                <div class="profile-actions">
                    <button class="edit-btn" id="editProfileBtn">
                        <span class="btn-icon">✏️</span>
                        Modificar información
                    </button>

                    <button class="edit-buttons" type="submit" style="display:none;">
                        Guardar cambios
                    </button>

                    <button type="button" class="edit-buttons cancel-btn" style="display:none;">Cancelar</button>


                    <button class="delete-btn" id="deleteAccountBtn">
                        <span class="btn-icon">🗑️</span>
                        Borrar cuenta
                    </button>
                </div>
            </form>
        </section>

        <!-- Sección del medidor y nivel -->
        <section class="progress-section">
        @if (ViewData["PuedeRealizarTest"] as bool? == true)
        {
            <div class="progress-title">
                <h2>Mide <span class="gradient-text">Tu Nivel de Estrés</span></h2>
                <p>Realiza el test ahora para conocer tu nivel de estrés</p>
            </div>
            <div class="test-option">
                <a asp-controller="Sisco" asp-action="Comienzo" class="create-btn">
                    <span class="btn-icon">📝</span>
                    Realizar Test
                </a>
            </div>
        } else {
            <div class="progress-title">
                <h2>Tu <span class="gradient-text">Nivel de Estrés</span></h2>
                <p>Prueba el minijuego de acuerdo a tu nivel</p>
            </div>

            <div class="meter-container">
                <!-- Fondo del medidor -->
            <div class="meter-bg" style="--progress: @ViewBag.Porcentaje%">
                    <!-- Centro del medidor -->
                    <div class="meter-inner">
                    <p class="meter-value">@ViewBag.Porcentaje%</p>
                        <p class="meter-label">de estrés</p>
                    </div>
                </div>

                <!-- Marcadores del medidor -->
            <div class="meter-marks">
                @for (int i = 0; i <= maxMarks; i += 9)
                {
                    <div class="mark" style="transform: rotate(@($"{i}deg"));"></div>
                }
            </div>
            </div>

            <div class="level-info">
            <h3 class="level-title">Nivel: @ViewBag.Nivel</h3>
                <p class="level-description">
                @ViewBag.Recomendacion
                </p>
            </div>
        }
        </section>        
    </main>

@section Scripts {

    <script>
        // JavaScript para controlar el menú desplegable
        document.addEventListener('DOMContentLoaded', function() {
            const editProfileBtn = document.getElementById('editProfileBtn');
            const editFields = document.querySelectorAll('.edit-mode');
            const displayFields = document.querySelectorAll('.display-mode');
            const editButtons = document.querySelectorAll('.edit-buttons');
            const noEditFields = document.querySelectorAll('.no-edit');
            
            const spanFecha = document.getElementById('memberSince');
            const rawDate = spanFecha.dataset.fecha;
            const fecha = new Date(rawDate);

            const opciones = { year: 'numeric', month: 'long' };
            const fechaFormateada = fecha.toLocaleDateString('es-MX', opciones);

            const form = document.querySelector('form');
            const pass = document.querySelector('input[name="Password"]');
            const confirm = document.querySelector('input[name="ConfirmarPassword"]');
            const submitBtn = form.querySelector('button[type="submit"]');

            // Capitalizar la primera letra del mes (opcional)
            spanFecha.textContent = fechaFormateada.charAt(0).toUpperCase() + fechaFormateada.slice(1);

            // Función para animar el medidor cuando la página cargue
            setTimeout(function() {
                const meterBg = document.querySelector('.meter-bg');
                meterBg.style.setProperty('--progress', '@ViewBag.Porcentaje%');
            }, 300);

            // Manejadores para los botones de acción
            const deleteAccountBtn = document.getElementById('deleteAccountBtn');

            // Evento para el botón de modificar
            if (editProfileBtn) {
                editProfileBtn.addEventListener('click', function() {
                    alert('Redirigiendo al formulario de modificación de perfil...');
                });
            }

            editProfileBtn.addEventListener('click', function (e) {
                e.preventDefault();
                editFields.forEach(f => f.style.display = 'inline');
                displayFields.forEach(s => s.style.display = 'none');
                editButtons.forEach(b => b.style.display = 'inline-block');
                editProfileBtn.style.display = 'none';
                noEditFields.forEach(f => f.style.display = 'none');
            });

            document.querySelector('.cancel-btn').addEventListener('click', function () {
                location.reload(); // Refresca la vista y recupera los datos originales
            });

            form.addEventListener('submit', function (e) {
                let isValid = true;

                // Si hay contraseña, debe coincidir con la confirmación
                if (pass.value && pass.value !== confirm.value) {
                    alert("Las contraseñas no coinciden.");
                    isValid = false;
                }

                // Validar campos requeridos
                const requiredFields = form.querySelectorAll('input[required]');
                requiredFields.forEach(function (input) {
                    if (!input.value.trim()) {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                }
            });

            // Opcional: Deshabilitar el botón si falta algo
            form.addEventListener('input', function () {
                const requiredFields = form.querySelectorAll('input[required]');
                let allFilled = true;
                requiredFields.forEach(input => {
                    if (!input.value.trim()) {
                        allFilled = false;
                    }
                });
                submitBtn.disabled = !allFilled;
            });

            // Evento para el botón de borrar cuenta
            if (deleteAccountBtn) {
                deleteAccountBtn.addEventListener('click', function() {
                    // Aquí iría la lógica para confirmar y borrar la cuenta
                    const confirmar = confirm('¿Estás seguro de que deseas eliminar tu cuenta? Esta acción no se puede deshacer.');
                    if (confirmar) {
                        alert('Cuenta eliminada. Redirigiendo a la página principal...');
                        // Aquí iría el código para eliminar la cuenta
                        window.location.href = '@Url.Action("Index", "Home")';
                    }
                });
            }
        });
    </script>
   
    }
    